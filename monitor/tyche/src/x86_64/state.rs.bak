use core::cmp::min;
use core::sync::atomic::{AtomicBool, Ordering};

use capa_engine::config::{NB_CORES, NB_DOMAINS, NB_REMAP_REGIONS};
use capa_engine::context::{RegisterContext, RegisterState};
use capa_engine::{CapaEngine, CapaError, Domain, GenArena, Handle, LocalCapa, MemOps, Remapper};
use mmu::eptmapper::EPT_ROOT_FLAGS;
use mmu::frame_allocator::PhysRange;
use mmu::ioptmapper::{PAGE_MASK, PAGE_SIZE};
use mmu::memory_coloring::color_to_phys::{self, ColorToPhys, MemoryRegion};
use mmu::memory_coloring::ActiveMemoryColoring;
use mmu::{EptMapper, FrameAllocator, IoPtFlag, IoPtMapper};
use spin::{Mutex, MutexGuard};
use stage_two_abi::Manifest;
use utils::{GuestPhysAddr, HostPhysAddr, HostVirtAddr};
use vmx::bitmaps::EptEntryFlags;
use vmx::fields::VmcsField;
use vmx::{ActiveVmcs, Vmxon};
use vtd::Iommu;

use super::context::Contextx86;
use super::vmx_helper::{dump_host_state, load_host_state};
use crate::allocator::allocator;
use crate::monitor::PlatformState;
use crate::rcframe::{RCFrame, RCFramePool, EMPTY_RCFRAME};
use crate::statics::get_manifest;
use crate::sync::Barrier;

/// VMXState encapsulates the vmxon and current vcpu.
/// The vcpu is subject to changes, but the vmxon remains the same
/// for the entire execution.
pub struct VmxState {
    pub vcpu: ActiveVmcs<'static>,
    pub vmxon: Vmxon,
    pub manifest: &'static Manifest,
}

/// Static values
pub static DOMAINS: [Mutex<DataX86>; NB_DOMAINS] = [EMPTY_DOMAIN; NB_DOMAINS];
pub static RC_VMCS: Mutex<RCFramePool> =
    Mutex::new(GenArena::new([EMPTY_RCFRAME; { NB_DOMAINS * NB_CORES }]));
pub static CONTEXTS: [[Mutex<Contextx86>; NB_CORES]; NB_DOMAINS] =
    [EMPTY_CONTEXT_ARRAY; NB_DOMAINS];
pub static IOMMU: Mutex<Iommu> =
    Mutex::new(unsafe { Iommu::new(HostVirtAddr::new(usize::max_value())) });
pub const FALSE: AtomicBool = AtomicBool::new(false);
pub static TLB_FLUSH_BARRIERS: [Barrier; NB_DOMAINS] = [Barrier::NEW; NB_DOMAINS];
pub static TLB_FLUSH: [AtomicBool; NB_DOMAINS] = [FALSE; NB_DOMAINS];

// —————————————————————————————— Empty values —————————————————————————————— //
const EMPTY_CONTEXT_ARRAY: [Mutex<Contextx86>; NB_CORES] = [EMPTY_CONTEXT; NB_CORES];
const EMPTY_CONTEXT: Mutex<Contextx86> = Mutex::new(Contextx86 {
    regs: RegisterContext {
        dirty: capa_engine::context::Cache { bitmap: 0 },
        state_16: RegisterState::new(),
        state_32: RegisterState::new(),
        state_64: RegisterState::new(),
        state_nat: RegisterState::new(),
        state_gp: RegisterState::new(),
    },
    interrupted: false,
    vmcs: Handle::<RCFrame>::new_invalid(),
});
const EMPTY_DOMAIN: Mutex<DataX86> = Mutex::new(DataX86 {
    ept: None,
    ept_old: None,
    iopt: None,
    remapper: Remapper::new(),
});

/// Domain data on x86
pub struct DataX86 {
    pub ept: Option<HostPhysAddr>,
    pub ept_old: Option<HostPhysAddr>,
    pub iopt: Option<HostPhysAddr>,
    pub remapper: Remapper<NB_REMAP_REGIONS>,
}

pub type StateX86 = VmxState;

impl StateX86 {
    pub unsafe fn free_ept(ept: HostPhysAddr, allocator: &impl FrameAllocator) {
        let mapper = EptMapper::new(allocator.get_physical_offset().as_usize(), ept);
        mapper.free_all(allocator);
    }

    pub unsafe fn free_iopt(iopt: HostPhysAddr, allocator: &impl FrameAllocator) {
        let mapper = IoPtMapper::new(allocator.get_physical_offset().as_usize(), iopt);
        mapper.free_all(allocator);
    }

    pub fn update_domain_iopt(
        domain_handle: Handle<Domain>,
        engine: &mut MutexGuard<CapaEngine>,
    ) -> bool {
        let mut domain: MutexGuard<'_, DataX86> = Self::get_domain(domain_handle);
        let allocator = allocator();
        if let Some(iopt) = domain.iopt {
            unsafe { Self::free_iopt(iopt, allocator) };
            // TODO: global invalidate context cache, PASID cache, and flush the IOTLB
        }

        let iopt_root = allocator
            .allocate_frame()
            .expect("Failed to allocate I/O PT root")
            .zeroed();
        let mut iopt_mapper = IoPtMapper::new(
            allocator.get_physical_offset().as_usize(),
            iopt_root.phys_addr,
        );

        // Traverse all regions of the I/O domain and maps them into the new iopt
        for range in engine.get_domain_permissions(domain_handle).unwrap() {
            if !range.ops.contains(MemOps::READ) {
                log::error!("there is a region without read permission: {}", range);
                continue;
            }
            let gpa = range.start;
            iopt_mapper.map_range(
                allocator,
                GuestPhysAddr::new(gpa),
                HostPhysAddr::new(range.start),
                range.size(),
                IoPtFlag::READ | IoPtFlag::WRITE | IoPtFlag::EXECUTE,
            )
        }

        domain.iopt = Some(iopt_root.phys_addr);

        // Update the IOMMU
        // TODO: @yuchen ideally we only need to change the 2nd stage page translation pointer on the
        //               context table, instead of reallocating the whole root table
        // Remap the DMA region on IOMMU
        let mut iommu = IOMMU.lock();
        if iommu.get_addr() as usize != 0 {
            let root_addr: HostPhysAddr =
                vtd::setup_iommu_context(iopt_mapper.get_root(), allocator);
            iommu.set_root_table_addr(root_addr.as_u64() | (0b00 << 10)); // Set legacy mode
            iommu.update_root_table_addr();
            iommu.enable_translation();
            log::info!("I/O MMU: {:?}", iommu.get_global_status());
            log::warn!("I/O MMU Fault: {:?}", iommu.get_fault_status());
        }

        false
    }

    pub fn update_domain_ept(
        domain_handle: Handle<Domain>,
        engine: &mut MutexGuard<CapaEngine>,
    ) -> bool {
        log::info!("\n ### entering update_domain_ept ###\n");
        let mut domain = Self::get_domain(domain_handle);
        let allocator = allocator();
        if domain.ept_old.is_some() {
            panic!("We will replace an ept old that's not empty");
        }
        let ept_root = allocator
            .allocate_frame()
            .expect("Failled to allocate EPT root")
            .zeroed();
        let mut mapper = EptMapper::new(
            allocator.get_physical_offset().as_usize(),
            ept_root.phys_addr,
        );

        //luca: iterator over ranges with same memory access permissions
        let permission_iter = engine.get_domain_permissions(domain_handle).unwrap();

        // This tracks the next gpa that should be just to map RAM regions
        let mut ram_gpa_cursor = 0;

        //luca: adjust to our two new memory types
        for (range_idx, range) in domain.remapper.remap(permission_iter).enumerate() {
            if !range.ops.contains(MemOps::READ) {
                log::error!("there is a region without read permission: {}", range);
                continue;
            }
            let mut flags = EptEntryFlags::READ;
            if range.ops.contains(MemOps::WRITE) {
                flags |= EptEntryFlags::WRITE;
            }
            if range.ops.contains(MemOps::EXEC) {
                if range.ops.contains(MemOps::SUPER) {
                    flags |= EptEntryFlags::SUPERVISOR_EXECUTE;
                } else {
                    flags |= EptEntryFlags::USER_EXECUTE;
                }
            }

            log::info!(
                "\nupdate_domain_ept: range_idx {:02} range {:x?}\n",
                range_idx,
                range
            );
            if range_idx >= 2 {
                panic!("debug stop");
            }

            //luca: here we consume the colors from .ops member and only create the
            //increase
            let resource_kind = range.resource_kind;
            let mut gpa = GuestPhysAddr::new(range.gpa);
            let mut hpa = HostPhysAddr::new(range.hpa);
            let mut mapping_size = range.size;

            /* Observations/Assumptions:
             * The results of the iterator are sorted, i.e. we go through the address space "left to right".
             * With partititions, a memory range might be smaller that its actually physical bounds, however
             * it cannot be larger. Thus, we cannot end up in the situation where we want to map an identity
             * mapped device but have already used that part of the address space for one of the preceedign
             * mappings
             *
             * TODO: preserve order when adding new colors later on
             */
            match resource_kind {
                capa_engine::ResourceKind::RAM(partitions_ids) => {
                    let color_to_phys = ColorToPhys::new(
                        get_manifest().get_boot_mem_regions(),
                        ActiveMemoryColoring {},
                        partitions_ids,
                    );
                    let mut phys_contig_range_idx = 0;
                    let first_gpa = ram_gpa_cursor;
                    let mut size_colored_memory = 0;
                    color_to_phys.visit_all_as_ranges(|range| {
                        //tracks next hpa of this range that needs to get mapped
                        let mut range_hpa_cursor = range.start;

                        let mut remaining_range_bytes = range.size();
                        size_colored_memory += range.size();
                        //helper var that tracks how many iterations it took to fully map this range
                        //This can happend if we hit ranges that are already used by devices
                        let mut cycle_idx = 0;
                        while remaining_range_bytes > 0 {
                            assert_eq!(remaining_range_bytes % PAGE_SIZE, 0, "remaining_bytes unaligned, top of mapping loop");
                            log::info!("RAM, range_idx {:02}, cycle_idx {:02}, phys_contig_range_idx {:02}, about to map gpa 0x{:x}, hpa 0x{:x}, size 0x{:x}",
                        range_idx, cycle_idx, phys_contig_range_idx, ram_gpa_cursor, range_hpa_cursor, remaining_range_bytes);
                            match mapper.map_range(
                                allocator,
                                GuestPhysAddr::new(ram_gpa_cursor),
                                HostPhysAddr::new(range_hpa_cursor),
                                remaining_range_bytes,
                                flags,
                            ) {
                                //On success, mapper was able to map everything
                                Ok(_) => {
                                    log::info!("RAM, range_idx {:02}, cycle_idx {:02}, phys_contig_range_idx {:02}, mapped everything at contig range, gpa 0x{:x}, hpa 0x{:x}, size 0x{:x}",
                                    range_idx, cycle_idx,phys_contig_range_idx, ram_gpa_cursor, range_hpa_cursor, remaining_range_bytes);
                                    assert_eq!(remaining_range_bytes%PAGE_SIZE,0,"remaning_bytes unaligned, mapped everything path");
                                    ram_gpa_cursor += remaining_range_bytes;
                                    remaining_range_bytes = 0;
                                },
                                //On error, we get the first hpa of the range that we could not map
                                //to the next gpa, because there was already sth (a device) mapped
                                Err(first_unmapped_hpa) => {
                                    //update remaining bytes count
                                    let mapped_bytes =
                                        first_unmapped_hpa.as_usize() - range_hpa_cursor;
                                    assert_eq!(mapped_bytes%PAGE_SIZE,0,"total_mapped_bytes is unaligned");
                                    remaining_range_bytes = range.size() - mapped_bytes;
                                    assert_eq!(remaining_range_bytes % PAGE_SIZE, 0, "remaining_bytes unaligned, mapped partially path");

                                    log::info!("RAM range_idx {:02}, cycle_idx {:02}, phys_contig_range_idx {:02}, mapped partially contig range, gpa 0x{:x}, hpa 0x{:x}. mapped bytes 0x{:x}, 0x{:x} bytes remaining. first unmapped hpa 0x{:x}",
                                    range_idx,cycle_idx, phys_contig_range_idx ,ram_gpa_cursor, range_hpa_cursor, mapped_bytes, remaining_range_bytes,first_unmapped_hpa.as_u64());

                                    //next hpa in this range that needs to get mapped
                                    range_hpa_cursor += mapped_bytes;

                                    //compute next gpa that we should try.
                                    // without +PAGE_SIZE
                                    //0 1 2 3 4
                                    //X X D X X
                                    //r r D X X -> next cursor should be 3
                                    // +1 ensures that we move past the gpa where the mapping failed
                                    //TODO: this is not very efficient as we move over device regions in step sizes of one
                                    //we should implement a linked list with blocked areas
                                    ram_gpa_cursor += mapped_bytes + PAGE_SIZE;
                                }
                            }
                            cycle_idx += 1;
                            /*if cycle_idx % 10 == 0 {
                                log::info!("range {:02}, phys_contig_range_idx {:02}, used {:05} mapping cycles", range_idx, phys_contig_range_idx, cycle_idx);
                            }*/
                        }
                        phys_contig_range_idx += 1;
                    });
                    log::info!(
                        "range_idx {:02} gpa_cursor before: 0x{:x}, gpa_cursor after 0x{:x}, size of gpa gap 0x{:x}, range size 0x{:x}",
                        range_idx,
                        first_gpa,
                        ram_gpa_cursor,
                        ram_gpa_cursor - first_gpa,
                        size_colored_memory,
                    );
                }
                // Device memory must be identity mapped, to pass through the access to the pyhsical HW
                capa_engine::ResourceKind::Device => {
                    gpa = GuestPhysAddr::new(range.hpa);
                    log::info!(
                        "update_domain_ept: {:02} mapping device, gpa 0x{:x}, hpa 0x{:x}, size 0x{:x}",
                        range_idx,
                        gpa.as_u64(),
                        range.hpa,
                        mapping_size
                    );
                    //mapper.debug_range(gpa, mapping_size);
                    match mapper.map_range(allocator, gpa, hpa, mapping_size, flags) {
                        Ok(_) => (),
                        Err(e) => {
                            log::info!(
                                "Failed to map device at gpa 0x{:x}, hpa 0x{:x}, size 0x{:x}. error {:?}",
                                gpa.as_u64(),
                                hpa.as_u64(),
                                mapping_size,
                                e
                            );
                            mapper.debug_range(gpa, min(0x5000, mapping_size));
                            panic!("device mappings should never fail due to an existing mapping");
                        }
                    }
                }
            }
            log::info!("\nupdate_domain_ept: moving to next range\n");

            //increase gpa linearly, use HPA from color as list
        }

        loop {
            match TLB_FLUSH[domain_handle.idx()].compare_exchange(
                false,
                true,
                Ordering::SeqCst,
                Ordering::SeqCst,
            ) {
                Ok(false) => break,
                _ => continue,
            }
        }

        // The core needs exclusive access before updating the domain's EPT. Otherwise, we might have
        // miss freeing some EPT roots.
        // The contexts per core will be updated in the permission change update.
        domain.ept_old = domain.ept;
        domain.ept = Some(ept_root.phys_addr);

        true
    }

    pub fn switch_domain(
        vcpu: &mut ActiveVmcs<'static>,
        current_ctx: &mut MutexGuard<Contextx86>,
        next_ctx: &mut MutexGuard<Contextx86>,
        next_domain: MutexGuard<DataX86>,
        return_capa: LocalCapa,
    ) -> Result<(), CapaError> {
        // Safety check that both contexts have a valid vmcs.
        if current_ctx.vmcs.is_invalid() || next_ctx.vmcs.is_invalid() {
            log::error!(
                "VMCS are none during switch: curr:{:?}, next:{:?}",
                current_ctx.vmcs.is_invalid(),
                next_ctx.vmcs.is_invalid()
            );
            return Err(CapaError::InvalidSwitch);
        }

        // We have different cases:
        // 1. current(interrupted) -- interrupt --> next.
        // 2. current -- resume interrupted --> next(interrupted)
        // 3. current -- synchronous --> next
        if current_ctx.interrupted && next_ctx.interrupted {
            panic!("Two domains should never be both interrupted in a switch.");
        }
        // Case 1: copy the interrupted state.
        if current_ctx.interrupted {
            next_ctx.copy_interrupt_frame(current_ctx, vcpu).unwrap();
            // Set the return values.
            next_ctx
                .set(VmcsField::GuestRax, 0, None)
                .or(Err(CapaError::PlatformError))?;
            next_ctx
                .set(VmcsField::GuestRdi, return_capa.as_usize(), None)
                .or(Err(CapaError::PlatformError))?;
        } else if next_ctx.interrupted {
            // Case 2: do not put the return capa.
            next_ctx.interrupted = false;
        } else {
            // Case 3: synchronous call.
            next_ctx
                .set(VmcsField::GuestRax, 0, None)
                .or(Err(CapaError::PlatformError))?;
            next_ctx
                .set(VmcsField::GuestRdi, return_capa.as_usize(), None)
                .or(Err(CapaError::PlatformError))?;
        }

        // Now the logic for shared vs. private vmcs.
        if current_ctx.vmcs == next_ctx.vmcs {
            panic!("Why are the two vmcs the same?");
        }
        current_ctx.load(vcpu);

        // NOTE; it seems on hardware we need to save and restore the host context, but we don't know
        // why yet, we need further invesdigation to be able to optimise this.
        let mut values: [usize; 13] = [0; 13];
        dump_host_state(vcpu, &mut values).expect("Couldn't save host context");

        // Configure state of the next TD
        next_ctx.switch_flush(&RC_VMCS, vcpu);
        vcpu.set_ept_ptr(HostPhysAddr::new(
            next_domain.ept.unwrap().as_usize() | EPT_ROOT_FLAGS,
        ))
        .expect("Failed to update EPT");
        load_host_state(vcpu, &mut values).expect("Couldn't save host context");
        Ok(())
    }
}
