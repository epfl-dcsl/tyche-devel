use core::sync::atomic::{AtomicBool, Ordering};

use capa_engine::config::{NB_CORES, NB_DOMAINS, NB_REMAP_REGIONS};
use capa_engine::context::{RegisterContext, RegisterState};
use capa_engine::ResourceKind::{self, Device};
use capa_engine::{CapaEngine, CapaError, Domain, GenArena, Handle, LocalCapa, MemOps, Remapper};
use mmu::eptmapper::EPT_ROOT_FLAGS;
use mmu::frame_allocator::PhysRange;
use mmu::ioptmapper::{PAGE_MASK, PAGE_SIZE};
use mmu::memory_coloring::color_to_phys::{self, ColorToPhys, MemoryRegion};
use mmu::memory_coloring::ActiveMemoryColoring;
use mmu::{EptMapper, FrameAllocator, IoPtFlag, IoPtMapper};
use spin::{Mutex, MutexGuard};
use stage_two_abi::Manifest;
use utils::{GuestPhysAddr, HostPhysAddr, HostVirtAddr};
use vmx::bitmaps::EptEntryFlags;
use vmx::fields::VmcsField;
use vmx::{ActiveVmcs, Vmxon};
use vtd::Iommu;

use super::context::Contextx86;
use super::vmx_helper::{dump_host_state, load_host_state};
use crate::allocator::allocator;
use crate::monitor::PlatformState;
use crate::rcframe::{RCFrame, RCFramePool, EMPTY_RCFRAME};
use crate::statics::get_manifest;
use crate::sync::Barrier;

/// VMXState encapsulates the vmxon and current vcpu.
/// The vcpu is subject to changes, but the vmxon remains the same
/// for the entire execution.
pub struct VmxState {
    pub vcpu: ActiveVmcs<'static>,
    pub vmxon: Vmxon,
    pub manifest: &'static Manifest,
}

/// Static values
pub static DOMAINS: [Mutex<DataX86>; NB_DOMAINS] = [EMPTY_DOMAIN; NB_DOMAINS];
pub static RC_VMCS: Mutex<RCFramePool> =
    Mutex::new(GenArena::new([EMPTY_RCFRAME; { NB_DOMAINS * NB_CORES }]));
pub static CONTEXTS: [[Mutex<Contextx86>; NB_CORES]; NB_DOMAINS] =
    [EMPTY_CONTEXT_ARRAY; NB_DOMAINS];
pub static IOMMU: Mutex<Iommu> =
    Mutex::new(unsafe { Iommu::new(HostVirtAddr::new(usize::max_value())) });
pub const FALSE: AtomicBool = AtomicBool::new(false);
pub static TLB_FLUSH_BARRIERS: [Barrier; NB_DOMAINS] = [Barrier::NEW; NB_DOMAINS];
pub static TLB_FLUSH: [AtomicBool; NB_DOMAINS] = [FALSE; NB_DOMAINS];

// —————————————————————————————— Empty values —————————————————————————————— //
const EMPTY_CONTEXT_ARRAY: [Mutex<Contextx86>; NB_CORES] = [EMPTY_CONTEXT; NB_CORES];
const EMPTY_CONTEXT: Mutex<Contextx86> = Mutex::new(Contextx86 {
    regs: RegisterContext {
        dirty: capa_engine::context::Cache { bitmap: 0 },
        state_16: RegisterState::new(),
        state_32: RegisterState::new(),
        state_64: RegisterState::new(),
        state_nat: RegisterState::new(),
        state_gp: RegisterState::new(),
    },
    interrupted: false,
    vmcs: Handle::<RCFrame>::new_invalid(),
});
const EMPTY_DOMAIN: Mutex<DataX86> = Mutex::new(DataX86 {
    ept: None,
    ept_old: None,
    iopt: None,
    remapper: Remapper::new(),
});

/// Domain data on x86
pub struct DataX86 {
    pub ept: Option<HostPhysAddr>,
    pub ept_old: Option<HostPhysAddr>,
    pub iopt: Option<HostPhysAddr>,
    pub remapper: Remapper<NB_REMAP_REGIONS>,
}

pub type StateX86 = VmxState;

impl StateX86 {
    pub unsafe fn free_ept(ept: HostPhysAddr, allocator: &impl FrameAllocator) {
        let mapper = EptMapper::new(allocator.get_physical_offset().as_usize(), ept);
        mapper.free_all(allocator);
    }

    pub unsafe fn free_iopt(iopt: HostPhysAddr, allocator: &impl FrameAllocator) {
        let mapper = IoPtMapper::new(allocator.get_physical_offset().as_usize(), iopt);
        mapper.free_all(allocator);
    }

    pub fn update_domain_iopt(
        domain_handle: Handle<Domain>,
        engine: &mut MutexGuard<CapaEngine>,
    ) -> bool {
        let mut domain: MutexGuard<'_, DataX86> = Self::get_domain(domain_handle);
        let allocator = allocator();
        if let Some(iopt) = domain.iopt {
            unsafe { Self::free_iopt(iopt, allocator) };
            // TODO: global invalidate context cache, PASID cache, and flush the IOTLB
        }

        let iopt_root = allocator
            .allocate_frame()
            .expect("Failed to allocate I/O PT root")
            .zeroed();
        let mut iopt_mapper = IoPtMapper::new(
            allocator.get_physical_offset().as_usize(),
            iopt_root.phys_addr,
        );

        // Traverse all regions of the I/O domain and maps them into the new iopt
        for range in engine.get_domain_permissions(domain_handle).unwrap() {
            if !range.ops.contains(MemOps::READ) {
                log::error!("there is a region without read permission: {}", range);
                continue;
            }
            let gpa = range.start;
            iopt_mapper.map_range(
                allocator,
                GuestPhysAddr::new(gpa),
                HostPhysAddr::new(range.start),
                range.size(),
                IoPtFlag::READ | IoPtFlag::WRITE | IoPtFlag::EXECUTE,
            )
        }

        domain.iopt = Some(iopt_root.phys_addr);

        // Update the IOMMU
        // TODO: @yuchen ideally we only need to change the 2nd stage page translation pointer on the
        //               context table, instead of reallocating the whole root table
        // Remap the DMA region on IOMMU
        let mut iommu = IOMMU.lock();
        if iommu.get_addr() as usize != 0 {
            let root_addr: HostPhysAddr =
                vtd::setup_iommu_context(iopt_mapper.get_root(), allocator);
            iommu.set_root_table_addr(root_addr.as_u64() | (0b00 << 10)); // Set legacy mode
            iommu.update_root_table_addr();
            iommu.enable_translation();
            log::info!("I/O MMU: {:?}", iommu.get_global_status());
            log::warn!("I/O MMU Fault: {:?}", iommu.get_fault_status());
        }

        false
    }

    pub fn update_domain_ept(
        domain_handle: Handle<Domain>,
        engine: &mut MutexGuard<CapaEngine>,
    ) -> bool {
        log::info!("\n ### entering update_domain_ept ###\n");
        let mut domain = Self::get_domain(domain_handle);
        let allocator = allocator();
        if domain.ept_old.is_some() {
            panic!("We will replace an ept old that's not empty");
        }
        let ept_root = allocator
            .allocate_frame()
            .expect("Failled to allocate EPT root")
            .zeroed();
        let mut mapper = EptMapper::new(
            allocator.get_physical_offset().as_usize(),
            ept_root.phys_addr,
        );

        //luca: iterator over ranges with same memory access permissions
        let permission_iter = engine.get_domain_permissions(domain_handle).unwrap();

        //we use this helper to get a list of device memory
        let mut device_range_helper_iter = domain
            .remapper
            .remap(permission_iter.clone())
            .filter(|v| ResourceKind::same_kind(&v.resource_kind, &ResourceKind::Device));

        let mut next_device_range = device_range_helper_iter.next();
        //tracks the next gpa where we can map ResourceKind::RAM
        let mut ram_gpa_cursor = 0;

        //luca: adjust to our two new memory types
        for (range_idx, range) in domain.remapper.remap(permission_iter).enumerate() {
            if !range.ops.contains(MemOps::READ) {
                log::error!("there is a region without read permission: {}", range);
                continue;
            }
            let mut flags = EptEntryFlags::READ;
            if range.ops.contains(MemOps::WRITE) {
                flags |= EptEntryFlags::WRITE;
            }
            if range.ops.contains(MemOps::EXEC) {
                if range.ops.contains(MemOps::SUPER) {
                    flags |= EptEntryFlags::SUPERVISOR_EXECUTE;
                } else {
                    flags |= EptEntryFlags::USER_EXECUTE;
                }
            }

            /* Observations/Assumptions:
             * The results of the iterator are sorted, i.e. we go through the address space "left to right".
             * With partititions, a memory range might be smaller that its actually physical bounds, however
             * it cannot be larger. Thus, we cannot end up in the situation where we want to map an identity
             * mapped device but have already used that part of the address space for one of the preceedign
             * mappings
             *
             * TODO: preserve order when adding new colors later on
             */
            let resource_kind = range.resource_kind;
            match resource_kind {
                capa_engine::ResourceKind::RAM(partitions_ids) => {
                    let color_to_phys = ColorToPhys::new(
                        get_manifest().get_boot_mem_regions(),
                        ActiveMemoryColoring {},
                        partitions_ids,
                    );
                    color_to_phys.visit_all_as_ranges(|partition_chunk| {
                        //figure out amout of bytes we can map before hitting the next range blocked for a device
                        let mut remaining_chunk_bytes = partition_chunk.size();
                        while remaining_chunk_bytes > 0 {
                            let map_size = match &next_device_range {
                                Some(next_device_range) => {
                                    let next_blocked_gpa = next_device_range.hpa;
                                    let available_bytes = next_blocked_gpa - ram_gpa_cursor;
                                    if remaining_chunk_bytes <= available_bytes {
                                        remaining_chunk_bytes
                                    } else {
                                        log::info!("range_idx {:2} partition_chunk {:x?} can only map 0x{:x} bytes before hitting device",range_idx, partition_chunk, available_bytes);
                                        available_bytes
                                    }
                                }
                                //No upcoming device memory -> can map everything
                                None => remaining_chunk_bytes,
                            };
                            assert_eq!(map_size%4096,0);
                            let map_gpa: usize = ram_gpa_cursor;

                            //update next_device_range and ram_gpa_cursor
                            if map_size < remaining_chunk_bytes {
                                if let Some(ndr) = &next_device_range {
                                    ram_gpa_cursor = ndr.hpa + ndr.size;
                                }
                                next_device_range = device_range_helper_iter.next();
                                if let Some(next_device_range) = &next_device_range {
                                    log::info!("next device will be at 0x{:x}", next_device_range.hpa);
                                } else {
                                    log::info!("no more devices upcoming");
                                }
                            } else {
                                ram_gpa_cursor += map_size
                            }
                            if let Err(e) = mapper
                                .map_range(
                                    allocator,
                                    GuestPhysAddr::new(map_gpa),
                                    HostPhysAddr::new(partition_chunk.start),
                                    map_size,
                                    flags,
                                ) {
                    log::error!("Failed to map RAM resource: range_idx {:02}, partition chunk {:x?}, ram_gpa_cursor 0x{:x}, map_size 0x{:x}. error {:x?}",
                range_idx, partition_chunk, ram_gpa_cursor, map_size, e);
                panic!("map failed");
                }

                            remaining_chunk_bytes -= map_size;
                            ram_gpa_cursor += map_size;
                        }
                    });
                }
                // Device memory must be identity mapped, to pass through the access to the pyhsical HW
                capa_engine::ResourceKind::Device => {
                    if let Err(e) = mapper.map_range(
                        allocator,
                        GuestPhysAddr::new(range.hpa),
                        HostPhysAddr::new(range.hpa),
                        range.size,
                        flags,
                    ) {
                        log::error!(
                            "Failed to map device resource: range_idx {:02}, {:x?} . error {:x?}",
                            range_idx,
                            range,
                            e
                        );
                        panic!("map failed");
                    }
                }
            }
            log::info!("\nupdate_domain_ept: moving to next range\n");

            //increase gpa linearly, use HPA from color as list
        }

        loop {
            match TLB_FLUSH[domain_handle.idx()].compare_exchange(
                false,
                true,
                Ordering::SeqCst,
                Ordering::SeqCst,
            ) {
                Ok(false) => break,
                _ => continue,
            }
        }

        // The core needs exclusive access before updating the domain's EPT. Otherwise, we might have
        // miss freeing some EPT roots.
        // The contexts per core will be updated in the permission change update.
        domain.ept_old = domain.ept;
        domain.ept = Some(ept_root.phys_addr);

        true
    }

    pub fn switch_domain(
        vcpu: &mut ActiveVmcs<'static>,
        current_ctx: &mut MutexGuard<Contextx86>,
        next_ctx: &mut MutexGuard<Contextx86>,
        next_domain: MutexGuard<DataX86>,
        return_capa: LocalCapa,
    ) -> Result<(), CapaError> {
        // Safety check that both contexts have a valid vmcs.
        if current_ctx.vmcs.is_invalid() || next_ctx.vmcs.is_invalid() {
            log::error!(
                "VMCS are none during switch: curr:{:?}, next:{:?}",
                current_ctx.vmcs.is_invalid(),
                next_ctx.vmcs.is_invalid()
            );
            return Err(CapaError::InvalidSwitch);
        }

        // We have different cases:
        // 1. current(interrupted) -- interrupt --> next.
        // 2. current -- resume interrupted --> next(interrupted)
        // 3. current -- synchronous --> next
        if current_ctx.interrupted && next_ctx.interrupted {
            panic!("Two domains should never be both interrupted in a switch.");
        }
        // Case 1: copy the interrupted state.
        if current_ctx.interrupted {
            next_ctx.copy_interrupt_frame(current_ctx, vcpu).unwrap();
            // Set the return values.
            next_ctx
                .set(VmcsField::GuestRax, 0, None)
                .or(Err(CapaError::PlatformError))?;
            next_ctx
                .set(VmcsField::GuestRdi, return_capa.as_usize(), None)
                .or(Err(CapaError::PlatformError))?;
        } else if next_ctx.interrupted {
            // Case 2: do not put the return capa.
            next_ctx.interrupted = false;
        } else {
            // Case 3: synchronous call.
            next_ctx
                .set(VmcsField::GuestRax, 0, None)
                .or(Err(CapaError::PlatformError))?;
            next_ctx
                .set(VmcsField::GuestRdi, return_capa.as_usize(), None)
                .or(Err(CapaError::PlatformError))?;
        }

        // Now the logic for shared vs. private vmcs.
        if current_ctx.vmcs == next_ctx.vmcs {
            panic!("Why are the two vmcs the same?");
        }
        current_ctx.load(vcpu);

        // NOTE; it seems on hardware we need to save and restore the host context, but we don't know
        // why yet, we need further invesdigation to be able to optimise this.
        let mut values: [usize; 13] = [0; 13];
        dump_host_state(vcpu, &mut values).expect("Couldn't save host context");

        // Configure state of the next TD
        next_ctx.switch_flush(&RC_VMCS, vcpu);
        vcpu.set_ept_ptr(HostPhysAddr::new(
            next_domain.ept.unwrap().as_usize() | EPT_ROOT_FLAGS,
        ))
        .expect("Failed to update EPT");
        load_host_state(vcpu, &mut values).expect("Couldn't save host context");
        Ok(())
    }
}
